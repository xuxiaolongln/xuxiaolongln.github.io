<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andres的博客</title>
  
  <subtitle>让技术变的简单</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-29T06:44:37.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Andres</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UIColor随手势渐变动画实现</title>
    <link href="http://yoursite.com/2018/12/29/UIColor%E9%9A%8F%E6%89%8B%E5%8A%BF%E6%B8%90%E5%8F%98%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/12/29/UIColor随手势渐变动画实现/</id>
    <published>2018-12-29T06:41:26.000Z</published>
    <updated>2018-12-29T06:44:37.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。"><a href="#在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。" class="headerlink" title="在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。"></a>在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。</h4><ul><li><p>在开始介绍颜色渐变动画之前，需要了解一个方法，将UIColor转换成RGBColor，因为我们如果要做渐变动画，需要使用RGB来做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/** 将UIColor转换成RGBColor */</span><br><span class="line">- (void)getRGBComponents:(CGFloat [3])components forColor:(UIColor *)color&#123;</span><br><span class="line">    CGColorSpaceRef rgbColorSpac = CGColorSpaceCreateDeviceRGB();</span><br><span class="line">    unsigned char resultingPixel[4];</span><br><span class="line">    CGContextRef context = CGBitmapContextCreate(&amp;resultingPixel, 1, 1, 8, 4, rgbColorSpac, kCGImageAlphaNoneSkipLast);</span><br><span class="line">    CGContextSetFillColorWithColor(context, [color CGColor]);</span><br><span class="line">    CGContextFillRect(context, CGRectMake(0, 0, 1, 1));</span><br><span class="line">    CGContextRelease(context);</span><br><span class="line">    CGColorSpaceRelease(rgbColorSpac);</span><br><span class="line">    for (int compont = 0; compont &lt; 3; compont++) &#123;</span><br><span class="line">        components[compont] = resultingPixel[compont] / 255.0f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//具体的使用方法</span><br><span class="line">CGFloat componts[3];</span><br><span class="line">[self getRGBComponents:componts forColor:[UIColor blackColor]];</span><br><span class="line">NSLog(@&quot;%f %f %f&quot;, componts[0], componts[1], componts[2]);</span><br></pre></td></tr></table></figure></li><li><p>我遇到的需求就是自定义UISegment,在左右滑动的时候，选项卡放大，同时字体颜色渐变，具体的实现方法如下，在scrollViewDidScroll方法中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView &#123;</span><br><span class="line">    CGFloat offsetX = scrollView.contentOffset.x;</span><br><span class="line">    CGFloat scrollWidth = scrollView.frame.size.width;</span><br><span class="line">    if (offsetX &lt; 0) return;</span><br><span class="line">    //获取当前index，和目标index</span><br><span class="line">    int tempIndex = (offsetX / scrollWidth);</span><br><span class="line">    if (tempIndex &gt; _numberOfSegments - 2) return;</span><br><span class="line">    //获取当前的view和目标View</span><br><span class="line">    UILabel *leftView = _items[tempIndex].label;</span><br><span class="line">    UILabel *rightView = _items[tempIndex + 1].label;</span><br><span class="line">    //获取scale和color渐变的具体值0~1</span><br><span class="line">    float leftColorValue = fmod((double)offsetX,scrollWidth) / scrollWidth;</span><br><span class="line">    float leftScaleValue = _maxScale - fmod((double)offsetX,scrollWidth) / scrollWidth * (_maxScale - _minScale);</span><br><span class="line">    float rightScaleValue = _minScale + fmod((double)offsetX,scrollWidth) / scrollWidth * (_maxScale - _minScale);</span><br><span class="line">    //对当前view和目标view进行放大动画</span><br><span class="line">    leftView.transform = CGAffineTransformMakeScale(leftScaleValue, leftScaleValue);</span><br><span class="line">    rightView.transform = CGAffineTransformMakeScale(rightScaleValue, rightScaleValue);</span><br><span class="line">    </span><br><span class="line">    //获取当前NormalColor</span><br><span class="line">    UIColor *normalColor = [self.attributesNormal objectForKey:NSForegroundColorAttributeName];</span><br><span class="line">    UIColor *selectColor = [self.attributesSelected objectForKey:NSForegroundColorAttributeName];</span><br><span class="line">    CGFloat normalColorComponents[3];</span><br><span class="line">    CGFloat selectColorComponents[3];</span><br><span class="line">    [self getRGBComponents:normalColorComponents forColor:normalColor];</span><br><span class="line">    [self getRGBComponents:selectColorComponents forColor:selectColor];</span><br><span class="line"></span><br><span class="line">    NSMutableDictionary *normalDic = [NSMutableDictionary dictionaryWithDictionary:_attributesNormal];</span><br><span class="line">    NSMutableDictionary *selectDic = [NSMutableDictionary dictionaryWithDictionary:_attributesSelected];</span><br><span class="line">    </span><br><span class="line">    //取出变化范围</span><br><span class="line">    CGFloat rDis = selectColorComponents[0] - normalColorComponents[0];</span><br><span class="line">    CGFloat gDis = selectColorComponents[1] - normalColorComponents[1];</span><br><span class="line">    CGFloat bDis = selectColorComponents[2] - normalColorComponents[2];</span><br><span class="line">    </span><br><span class="line">    normalDic[NSForegroundColorAttributeName] = [UIColor colorWithRed:selectColorComponents[0] - rDis * leftColorValue  green:selectColorComponents[1] - gDis * leftColorValue blue:selectColorComponents[2] - bDis * leftColorValue alpha:1];</span><br><span class="line">    </span><br><span class="line">    selectDic[NSForegroundColorAttributeName] = [UIColor colorWithRed:normalColorComponents[0] + rDis * leftColorValue  green:normalColorComponents[1] + gDis * leftColorValue blue:normalColorComponents[2] + bDis * leftColorValue alpha:1];</span><br><span class="line">    </span><br><span class="line">    leftView.attributedText = [[NSMutableAttributedString alloc] initWithString:leftView.attributedText.string  attributes:normalDic];</span><br><span class="line">    </span><br><span class="line">    rightView.attributedText = [[NSMutableAttributedString alloc] initWithString:rightView.attributedText.string  attributes:selectDic];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="以上就完成了整个颜色渐变的过程"><a href="#以上就完成了整个颜色渐变的过程" class="headerlink" title="以上就完成了整个颜色渐变的过程"></a>以上就完成了整个颜色渐变的过程</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。&quot;&gt;&lt;a href=&quot;#在平常开发过程中，关于颜色的动画，只要使用UIVie
      
    
    </summary>
    
    
  </entry>
  
</feed>
