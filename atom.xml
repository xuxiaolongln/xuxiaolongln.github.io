<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andres的博客</title>
  
  <subtitle>让技术变的简单</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-03T04:01:36.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Andres</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitLab克隆代码时出现Permission denied (publickey,gssapi-keyex,gssapi-with-mic,passwo</title>
    <link href="http://yoursite.com/2019/01/03/GitLab%E5%85%8B%E9%9A%86%E4%BB%A3%E7%A0%81%E6%97%B6%E5%87%BA%E7%8E%B0Permission%20denied%20(publickey,gssapi-keyex,gssapi-with-mic,passwo/"/>
    <id>http://yoursite.com/2019/01/03/GitLab克隆代码时出现Permission denied (publickey,gssapi-keyex,gssapi-with-mic,passwo/</id>
    <published>2019-01-03T04:01:36.000Z</published>
    <updated>2019-01-03T04:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一种，直接使用Http的链接clone代码"><a href="#第一种，直接使用Http的链接clone代码" class="headerlink" title="第一种，直接使用Http的链接clone代码"></a>第一种，直接使用Http的链接clone代码</h2><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/16811be634cdd5b0?w=1968&amp;h=314&amp;f=png&amp;s=67760" alt=""><br>如果使用Http链接还是出Permission denied或者密码错误等异常情况，可以直接在Http链接中添加密码，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://xuxiaolong:xxxxxxxx@gitlab.xxx.com</span><br></pre></td></tr></table></figure></p><h2 id="第二种，使用SSH的方式clone代码。此方式需要在GitLab上配置ssh-key"><a href="#第二种，使用SSH的方式clone代码。此方式需要在GitLab上配置ssh-key" class="headerlink" title="第二种，使用SSH的方式clone代码。此方式需要在GitLab上配置ssh key"></a>第二种，使用SSH的方式clone代码。此方式需要在GitLab上配置ssh key</h2><h3 id="首先，打开本地-ssh文件夹"><a href="#首先，打开本地-ssh文件夹" class="headerlink" title="首先，打开本地.ssh文件夹"></a>首先，打开本地.ssh文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><h4 id="查看此文件夹下面是否存在id-rsa和id-rsa-pub两个文件，如果存在，表明之前有生成过ssh-key，如果不存在，可以通过以下命令直接生成ssh-key"><a href="#查看此文件夹下面是否存在id-rsa和id-rsa-pub两个文件，如果存在，表明之前有生成过ssh-key，如果不存在，可以通过以下命令直接生成ssh-key" class="headerlink" title="查看此文件夹下面是否存在id_rsa和id_rsa.pub两个文件，如果存在，表明之前有生成过ssh key，如果不存在，可以通过以下命令直接生成ssh key"></a>查看此文件夹下面是否存在id_rsa和id_rsa.pub两个文件，如果存在，表明之前有生成过ssh key，如果不存在，可以通过以下命令直接生成ssh key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &apos;xxx@xxx.com&apos; (‘’中的参数就是你的邮箱地址)</span><br></pre></td></tr></table></figure><h4 id="终端输入此命令，一直回车-直到出现下图的结果，表示ssh-key生成完成"><a href="#终端输入此命令，一直回车-直到出现下图的结果，表示ssh-key生成完成" class="headerlink" title="终端输入此命令，一直回车,直到出现下图的结果，表示ssh key生成完成"></a>终端输入此命令，一直回车,直到出现下图的结果，表示ssh key生成完成</h4><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/16811cbfd748ce66?w=1164&amp;h=620&amp;f=png&amp;s=179409" alt=""></p><h4 id="此时-ssh问价夹下面会出现test-rsa和test-rsa-pub两个文件"><a href="#此时-ssh问价夹下面会出现test-rsa和test-rsa-pub两个文件" class="headerlink" title="此时.ssh问价夹下面会出现test_rsa和test_rsa.pub两个文件"></a>此时.ssh问价夹下面会出现test_rsa和test_rsa.pub两个文件</h4><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/16811cdec9ffef81?w=1144&amp;h=174&amp;f=png&amp;s=57196" alt=""></p><h4 id="打开test-rsa-pub文件，将里面的所有内容复制到GitLab上对应位置"><a href="#打开test-rsa-pub文件，将里面的所有内容复制到GitLab上对应位置" class="headerlink" title="打开test_rsa.pub文件，将里面的所有内容复制到GitLab上对应位置"></a>打开test_rsa.pub文件，将里面的所有内容复制到GitLab上对应位置</h4><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/16811d0979ca7605?w=2678&amp;h=1292&amp;f=png&amp;s=239418" alt=""></p><h4 id="此时，ssh-key配置完成。"><a href="#此时，ssh-key配置完成。" class="headerlink" title="此时，ssh key配置完成。"></a>此时，ssh key配置完成。</h4><h2 id="如果同时使用GitLab和GitHub，那么就需要配置多个ssh-key"><a href="#如果同时使用GitLab和GitHub，那么就需要配置多个ssh-key" class="headerlink" title="如果同时使用GitLab和GitHub，那么就需要配置多个ssh key"></a>如果同时使用GitLab和GitHub，那么就需要配置多个ssh key</h2><h3 id="1、使用如下命令，指定文件名生成一个ssh-key"><a href="#1、使用如下命令，指定文件名生成一个ssh-key" class="headerlink" title="1、使用如下命令，指定文件名生成一个ssh key"></a>1、使用如下命令，指定文件名生成一个ssh key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &apos;xxx@xxx.com&apos; -f ~/.ssh/gitlab_rsa</span><br></pre></td></tr></table></figure><h4 id="此时在-ssh文件夹下面会生成gitlab-rsa和gitlab-rsa-pub两个文件"><a href="#此时在-ssh文件夹下面会生成gitlab-rsa和gitlab-rsa-pub两个文件" class="headerlink" title="此时在.ssh文件夹下面会生成gitlab_rsa和gitlab_rsa.pub两个文件"></a>此时在.ssh文件夹下面会生成gitlab_rsa和gitlab_rsa.pub两个文件</h4><h3 id="2、在-ssh文件夹下面新建名为config的文件，用来配置多个ssh-key"><a href="#2、在-ssh文件夹下面新建名为config的文件，用来配置多个ssh-key" class="headerlink" title="2、在~/.ssh文件夹下面新建名为config的文件，用来配置多个ssh key"></a>2、在~/.ssh文件夹下面新建名为config的文件，用来配置多个ssh key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># gitlab</span><br><span class="line">Host gitlab.bitautotech.com</span><br><span class="line">    HostName gitlab.bitautotech.com</span><br><span class="line">    User xuxiaolong3</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/gitlab_rsa</span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"># 配置文件参数</span><br><span class="line"># Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件</span><br><span class="line"># HostName : 要登录主机的主机名</span><br><span class="line"># User : 登录名,不填写的话，默认使用邮箱作为登录名</span><br><span class="line"># IdentityFile : 指明上面User对应的identityFile路径</span><br></pre></td></tr></table></figure><p>此时再次去终端进行clone，第一次会让你输入密码，输入完成之后就可以正常clone了。</p><h4 id="参考文章：https-www-cnblogs-com-hafiz-p-8146324-html"><a href="#参考文章：https-www-cnblogs-com-hafiz-p-8146324-html" class="headerlink" title="参考文章：https://www.cnblogs.com/hafiz/p/8146324.html"></a>参考文章：<a href="https://www.cnblogs.com/hafiz/p/8146324.html" target="_blank" rel="noopener">https://www.cnblogs.com/hafiz/p/8146324.html</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一种，直接使用Http的链接clone代码&quot;&gt;&lt;a href=&quot;#第一种，直接使用Http的链接clone代码&quot; class=&quot;headerlink&quot; title=&quot;第一种，直接使用Http的链接clone代码&quot;&gt;&lt;/a&gt;第一种，直接使用Http的链接clone
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>冒泡排序和快速排序的几种方式（OC实现）</title>
    <link href="http://yoursite.com/2019/01/02/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/01/02/冒泡排序和快速排序的几种方式/</id>
    <published>2019-01-02T02:59:49.000Z</published>
    <updated>2019-01-02T03:05:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先需要创建交换数组中元素的方法"><a href="#首先需要创建交换数组中元素的方法" class="headerlink" title="首先需要创建交换数组中元素的方法"></a>首先需要创建交换数组中元素的方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//交换数组中的两个数</span><br><span class="line">- (void)swap:(NSMutableArray *)sourceArr numI:(int)i numJ:(int)j&#123;</span><br><span class="line">    NSNumber *temp;</span><br><span class="line">    temp = sourceArr[i];</span><br><span class="line">    sourceArr[i] = sourceArr[j];</span><br><span class="line">    sourceArr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序方法一"><a href="#快速排序方法一" class="headerlink" title="快速排序方法一"></a>快速排序方法一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//快速排序(基本的思想就是，i指向最左边元素的下一个元素，j指向最后一个元素，然后从右向左寻找第一个比中轴元素小的元素，从左向右寻找一个比中轴元素大的元素，两者交换位置，当i&gt;j的时候，交换中轴元素和j的位置，最后通过递归对中轴前后的元素分别进行递归)</span><br><span class="line">- (void)quickSort:(NSMutableArray *)sourceArr indexL:(int)indexL indexR:(int)indexR&#123;</span><br><span class="line">    //递归的边界条件</span><br><span class="line">    if (indexL &lt; indexR) &#123;</span><br><span class="line">        //获取最左边的元素作为中轴元素</span><br><span class="line">        int pio = [sourceArr[indexL] intValue];</span><br><span class="line">        int i = indexL + 1;</span><br><span class="line">        int j = indexR;</span><br><span class="line">        while (i &lt;= j) &#123;</span><br><span class="line">            //先从右往左查找</span><br><span class="line">            while (i &lt;= j &amp;&amp; [sourceArr[j] intValue] &gt; pio) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            //从左往右查找</span><br><span class="line">            while (i &lt;= j &amp;&amp; [sourceArr[i] intValue] &lt;= pio) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            if (i &lt; j) &#123;</span><br><span class="line">                //交换两个数</span><br><span class="line">                [self swap:sourceArr numI:i numJ:j];</span><br><span class="line">                i++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //最后一次将j的位置的元素与中轴元素进行交换</span><br><span class="line">        [self swap:sourceArr numI:indexL numJ:j];</span><br><span class="line">        //递归调用，对左边元素按相同的方式依次进行排序</span><br><span class="line">        [self quickSort:sourceArr indexL:indexL indexR:j - 1];</span><br><span class="line">        //递归调用，对右边元素按相同的方式依次进行排序</span><br><span class="line">        [self quickSort:sourceArr indexL:j + 1 indexR:indexR];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序方法二"><a href="#快速排序方法二" class="headerlink" title="快速排序方法二"></a>快速排序方法二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//快速排序方法2（将最左边的元素作为中轴元素，先从后往前查找出当前比中轴元素小的元素，交换两者位置，然后从前往后查找出比当前中轴元素大的元素，交换两者位置，直到i和j相等，此处就是最终中轴的位置，然后对中轴前后的元素分别进行递归）</span><br><span class="line">- (void)quickSort2:(NSMutableArray *)sourceArr indexL:(int)indexL indexR:(int)indexR&#123;</span><br><span class="line">    //递归的边界</span><br><span class="line">    if (indexL &lt; indexR) &#123;</span><br><span class="line">        //获取中轴元素</span><br><span class="line">        int pio = [sourceArr[indexL] intValue];</span><br><span class="line">        int i = indexL;</span><br><span class="line">        int j = indexR;</span><br><span class="line">        while (i &lt; j) &#123;</span><br><span class="line">            //从后往前查找小于中轴元素的元素</span><br><span class="line">            while (i &lt; j &amp;&amp; [sourceArr[j] intValue] &gt; pio) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            //将j位置的元素赋值给i</span><br><span class="line">            sourceArr[i] = sourceArr[j];</span><br><span class="line">            </span><br><span class="line">            //从前往后查找大于中轴元素的元素</span><br><span class="line">            while (i &lt; j &amp;&amp; [sourceArr[i] intValue] &lt;= pio) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            //将i位置的元素赋值给j</span><br><span class="line">            sourceArr[j] = sourceArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        //当i和j指向同一个位置的时候，将中轴元素的值赋值给i</span><br><span class="line">        sourceArr[i] = @(pio);</span><br><span class="line">        //递归遍历</span><br><span class="line">        [self quickSort2:sourceArr indexL:indexL indexR:i - 1];</span><br><span class="line">        [self quickSort2:sourceArr indexL:i + 1 indexR:indexR];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序方法三"><a href="#快速排序方法三" class="headerlink" title="快速排序方法三"></a>快速排序方法三</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//快速排序方法3（将最左边的元素作为中轴元素，将i指向中轴元素，j指向中轴元素的下一个未知元素，判断j指向的元素是否比中轴元素小，如果小，则将i++,然后交换j和i元素的位置，如果大于，则j向后移动一位）</span><br><span class="line">- (void)quickSort3:(NSMutableArray *)sourceArr indexL:(int)indexL indexR:(int)indexR&#123;</span><br><span class="line">    if (indexL &lt; indexR) &#123;</span><br><span class="line">        //获取中轴元素</span><br><span class="line">        int pio = [sourceArr[indexL] intValue];</span><br><span class="line">        int i = indexL;</span><br><span class="line">        int j = indexL + 1;</span><br><span class="line">        while (j &lt;= indexR) &#123;</span><br><span class="line">            //判断j位置的元素的大小</span><br><span class="line">            if ([sourceArr[j] intValue] &lt;= pio) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                //交换i和j</span><br><span class="line">                [self swap:sourceArr numI:i numJ:j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //交换i和中轴元素的位置，将中轴元素放在指定的位置上</span><br><span class="line">        [self swap:sourceArr numI:indexL numJ:i];</span><br><span class="line">        //递归左边的数据</span><br><span class="line">        [self quickSort3:sourceArr indexL:indexL indexR:i - 1];</span><br><span class="line">        [self quickSort3:sourceArr indexL:i + 1 indexR:indexR];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序方法四"><a href="#快速排序方法四" class="headerlink" title="快速排序方法四"></a>快速排序方法四</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//快速排序算法4（定义一个cur和pre，cur指向最左边的位置，pre指向cur的前一个位置，key表示最后一个位置，cur和pre同时往前走，当遇见cur的值比key大时，cur和pre之间的距离会拉大，当cur的值比key小时，交换cur和pre的位置，然后继续往后移动，当cur移动到key的位置时，交换pre和key的位置）</span><br><span class="line">- (void)quickSort4:(NSMutableArray *)sourceArr indexL:(int)indexL indexR:(int)indexR&#123;</span><br><span class="line">    if (indexL &lt; indexR) &#123;</span><br><span class="line">        int key = [sourceArr[indexR] intValue];</span><br><span class="line">        int cur = indexL;</span><br><span class="line">        int pre = cur - 1;</span><br><span class="line">        while (cur &lt; indexR) &#123;</span><br><span class="line">            //如果找到小于key的值，并且cur和pre之间有距离的时候</span><br><span class="line">            while ([sourceArr[cur] intValue] &lt; key &amp;&amp; ++pre != cur) &#123;</span><br><span class="line">                //交换pre和cur的数据</span><br><span class="line">                [self swap:sourceArr numI:cur numJ:pre];</span><br><span class="line">            &#125;</span><br><span class="line">            ++cur;</span><br><span class="line">        &#125;</span><br><span class="line">        [self swap:sourceArr numI:++pre numJ:indexR];</span><br><span class="line">        //递归前一部分和后一部分的数据</span><br><span class="line">        [self quickSort4:sourceArr indexL:indexL indexR:pre - 1];</span><br><span class="line">        [self quickSort4:sourceArr indexL:pre + 1 indexR:indexR];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//冒泡排序，比较相邻的两个元素</span><br><span class="line">- (void)bubblingSort:(NSMutableArray *)sourceArr&#123;</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; sourceArr.count - 1; i++) &#123;</span><br><span class="line">        for (int j = 0; j &lt; sourceArr.count - i - 1; j++) &#123;</span><br><span class="line">            if ([sourceArr[j] intValue] &gt; [sourceArr[j + 1] intValue]) &#123;</span><br><span class="line">                [self swap:sourceArr numI:j numJ:j + 1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首先需要创建交换数组中元素的方法&quot;&gt;&lt;a href=&quot;#首先需要创建交换数组中元素的方法&quot; class=&quot;headerlink&quot; title=&quot;首先需要创建交换数组中元素的方法&quot;&gt;&lt;/a&gt;首先需要创建交换数组中元素的方法&lt;/h4&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UIColor随手势渐变动画实现</title>
    <link href="http://yoursite.com/2018/12/29/UIColor%E9%9A%8F%E6%89%8B%E5%8A%BF%E6%B8%90%E5%8F%98%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/12/29/UIColor随手势渐变动画实现/</id>
    <published>2018-12-29T06:41:26.000Z</published>
    <updated>2018-12-29T06:44:37.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。"><a href="#在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。" class="headerlink" title="在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。"></a>在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。</h4><ul><li><p>在开始介绍颜色渐变动画之前，需要了解一个方法，将UIColor转换成RGBColor，因为我们如果要做渐变动画，需要使用RGB来做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/** 将UIColor转换成RGBColor */</span><br><span class="line">- (void)getRGBComponents:(CGFloat [3])components forColor:(UIColor *)color&#123;</span><br><span class="line">    CGColorSpaceRef rgbColorSpac = CGColorSpaceCreateDeviceRGB();</span><br><span class="line">    unsigned char resultingPixel[4];</span><br><span class="line">    CGContextRef context = CGBitmapContextCreate(&amp;resultingPixel, 1, 1, 8, 4, rgbColorSpac, kCGImageAlphaNoneSkipLast);</span><br><span class="line">    CGContextSetFillColorWithColor(context, [color CGColor]);</span><br><span class="line">    CGContextFillRect(context, CGRectMake(0, 0, 1, 1));</span><br><span class="line">    CGContextRelease(context);</span><br><span class="line">    CGColorSpaceRelease(rgbColorSpac);</span><br><span class="line">    for (int compont = 0; compont &lt; 3; compont++) &#123;</span><br><span class="line">        components[compont] = resultingPixel[compont] / 255.0f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//具体的使用方法</span><br><span class="line">CGFloat componts[3];</span><br><span class="line">[self getRGBComponents:componts forColor:[UIColor blackColor]];</span><br><span class="line">NSLog(@&quot;%f %f %f&quot;, componts[0], componts[1], componts[2]);</span><br></pre></td></tr></table></figure></li><li><p>我遇到的需求就是自定义UISegment,在左右滑动的时候，选项卡放大，同时字体颜色渐变，具体的实现方法如下，在scrollViewDidScroll方法中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView &#123;</span><br><span class="line">    CGFloat offsetX = scrollView.contentOffset.x;</span><br><span class="line">    CGFloat scrollWidth = scrollView.frame.size.width;</span><br><span class="line">    if (offsetX &lt; 0) return;</span><br><span class="line">    //获取当前index，和目标index</span><br><span class="line">    int tempIndex = (offsetX / scrollWidth);</span><br><span class="line">    if (tempIndex &gt; _numberOfSegments - 2) return;</span><br><span class="line">    //获取当前的view和目标View</span><br><span class="line">    UILabel *leftView = _items[tempIndex].label;</span><br><span class="line">    UILabel *rightView = _items[tempIndex + 1].label;</span><br><span class="line">    //获取scale和color渐变的具体值0~1</span><br><span class="line">    float leftColorValue = fmod((double)offsetX,scrollWidth) / scrollWidth;</span><br><span class="line">    float leftScaleValue = _maxScale - fmod((double)offsetX,scrollWidth) / scrollWidth * (_maxScale - _minScale);</span><br><span class="line">    float rightScaleValue = _minScale + fmod((double)offsetX,scrollWidth) / scrollWidth * (_maxScale - _minScale);</span><br><span class="line">    //对当前view和目标view进行放大动画</span><br><span class="line">    leftView.transform = CGAffineTransformMakeScale(leftScaleValue, leftScaleValue);</span><br><span class="line">    rightView.transform = CGAffineTransformMakeScale(rightScaleValue, rightScaleValue);</span><br><span class="line">    </span><br><span class="line">    //获取当前NormalColor</span><br><span class="line">    UIColor *normalColor = [self.attributesNormal objectForKey:NSForegroundColorAttributeName];</span><br><span class="line">    UIColor *selectColor = [self.attributesSelected objectForKey:NSForegroundColorAttributeName];</span><br><span class="line">    CGFloat normalColorComponents[3];</span><br><span class="line">    CGFloat selectColorComponents[3];</span><br><span class="line">    [self getRGBComponents:normalColorComponents forColor:normalColor];</span><br><span class="line">    [self getRGBComponents:selectColorComponents forColor:selectColor];</span><br><span class="line"></span><br><span class="line">    NSMutableDictionary *normalDic = [NSMutableDictionary dictionaryWithDictionary:_attributesNormal];</span><br><span class="line">    NSMutableDictionary *selectDic = [NSMutableDictionary dictionaryWithDictionary:_attributesSelected];</span><br><span class="line">    </span><br><span class="line">    //取出变化范围</span><br><span class="line">    CGFloat rDis = selectColorComponents[0] - normalColorComponents[0];</span><br><span class="line">    CGFloat gDis = selectColorComponents[1] - normalColorComponents[1];</span><br><span class="line">    CGFloat bDis = selectColorComponents[2] - normalColorComponents[2];</span><br><span class="line">    </span><br><span class="line">    normalDic[NSForegroundColorAttributeName] = [UIColor colorWithRed:selectColorComponents[0] - rDis * leftColorValue  green:selectColorComponents[1] - gDis * leftColorValue blue:selectColorComponents[2] - bDis * leftColorValue alpha:1];</span><br><span class="line">    </span><br><span class="line">    selectDic[NSForegroundColorAttributeName] = [UIColor colorWithRed:normalColorComponents[0] + rDis * leftColorValue  green:normalColorComponents[1] + gDis * leftColorValue blue:normalColorComponents[2] + bDis * leftColorValue alpha:1];</span><br><span class="line">    </span><br><span class="line">    leftView.attributedText = [[NSMutableAttributedString alloc] initWithString:leftView.attributedText.string  attributes:normalDic];</span><br><span class="line">    </span><br><span class="line">    rightView.attributedText = [[NSMutableAttributedString alloc] initWithString:rightView.attributedText.string  attributes:selectDic];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="以上就完成了整个颜色渐变的过程"><a href="#以上就完成了整个颜色渐变的过程" class="headerlink" title="以上就完成了整个颜色渐变的过程"></a>以上就完成了整个颜色渐变的过程</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在平常开发过程中，关于颜色的动画，只要使用UIView的animation方法就可以实现。但是有一种比较特殊的需求，就是颜色渐变效果的实现，颜色需要根据距离或者是手指拖动的范围来进行渐变。&quot;&gt;&lt;a href=&quot;#在平常开发过程中，关于颜色的动画，只要使用UIVie
      
    
    </summary>
    
    
  </entry>
  
</feed>
